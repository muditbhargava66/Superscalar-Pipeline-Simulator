[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "superscalar-pipeline-simulator"
version = "1.0.0"
description = "A comprehensive superscalar pipeline simulator for educational and research purposes"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Mudit Bhargava", email = "muditbhargava66@gmail.com"}
]
maintainers = [
    {name = "Mudit Bhargava", email = "muditbhargava66@gmail.com"}
]
keywords = [
    "processor", "pipeline", "superscalar", "simulation", "computer-architecture",
    "performance-analysis", "education", "research"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Education",
    "Topic :: Scientific/Engineering",
    "Topic :: System :: Hardware",
]
requires-python = ">=3.10"
dependencies = [
    "pyyaml>=6.0",
    "numpy>=1.21.0,<2.0.0",  # Pin numpy to avoid breaking changes
    "matplotlib>=3.5.0",
    "pydantic>=2.0.0",  # For configuration validation
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=22.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
]
gui = [
    "tkinter",
    "PyQt5>=5.15.0",
]
visualization = [
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]

[project.urls]
Homepage = "https://github.com/muditbhargava66/superscalar-pipeline-simulator"
Repository = "https://github.com/muditbhargava66/superscalar-pipeline-simulator"
Documentation = "https://github.com/muditbhargava66/superscalar-pipeline-simulator/docs"
"Bug Tracker" = "https://github.com/muditbhargava66/superscalar-pipeline-simulator/issues"

[project.scripts]
superscalar-sim = "src.main:main"
pipeline-visualizer = "src.visualization.pipeline_visualizer:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*", "docs*", "benchmarks*"]

[tool.setuptools.package-data]
"src" = ["*.yaml", "*.yml", "*.json"]

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "PLW2901", # redefined loop variable
    "ARG002",  # unused method argument
    "ARG001",  # unused function argument
    "SIM108",  # use ternary operator
    "ERA001",  # commented out code
    "PLR0911", # too many return statements
    "TCH001",  # type checking imports
    "TCH002",  # type checking imports
    "TCH003",  # type checking imports
    "PTH120",  # pathlib usage
    "PTH123",  # pathlib usage
    "UP006",   # type annotations
    "UP007",   # type annotations
    "F821",    # undefined name (handled by mypy)
    "F401",    # unused import
    "W293",    # blank line contains whitespace
    "RUF013",  # implicit optional
    "RUF012",  # mutable class attributes
    "SIM102",  # nested if statements
    "SIM103",  # return condition directly
    "SIM105",  # use contextlib.suppress
    "SIM110",  # use any/all
    "SIM113",  # use enumerate
    "C401",    # unnecessary generator
    "C408",    # unnecessary dict call
    "E722",    # bare except
    "B007",    # unused loop variable
    "RUF001",  # ambiguous unicode
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["PLR2004", "S101", "ARG", "FBT"]
"src/main.py" = ["PLR0913", "PLR0912"]
"benchmarks/*" = ["ALL"]

[tool.ruff.lint.isort]
known-first-party = ["src"]
force-sort-within-sections = true

[tool.ruff.lint.mccabe]
max-complexity = 10

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | benchmarks
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "matplotlib.*",
    "numpy.*",
    "yaml.*",
    "pytest.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gui: marks tests that require GUI",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/benchmarks/*",
    "*/docs/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Pre-commit hooks would be configured in .pre-commit-config.yaml